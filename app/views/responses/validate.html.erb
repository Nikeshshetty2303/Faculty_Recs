<%= render partial: 'partials/navbar', locals: { user: @user, locale: true } %>
<%= stylesheet_link_tag 'validate' %>

<div class="container mt-4">
  <%= link_to "Go Back", :back, class: "btn btn-light mb-3" %>

  <div class="row">
    <div class="col-md-8">
      <section class="job-info card">
        <div class="card-body">
          <h2 class="card-title">Candidate Details</h2>
          <div class="job-details">
            <% profile_response = @responses.user.responses.where(profile_response: true).first %>
            <div class="detail-row">
              <p><span>Application No.:</span> <strong><%= @responses.app_no%></strong></p>
            </div>
            <div class="detail-row">
              <% dob_answer = profile_response.answers.joins(:question).find_by(questions: { title: "Date of Birth (DD-MM-YYYY)" }) %>
              <p>
                <span>DOB:</span>
                <strong>
                  <%= if dob_answer.try(:content).present?
                        dob = Date.parse(dob_answer.content)
                        dob.strftime("%d-%m-%Y")
                      else
                        "Not Entered"
                      end
                  %>
                </strong>
              </p>
            </div>
            <div class="detail-row">
              <% name_answer = profile_response.answers.joins(:question).find_by(questions: { title: "Name in Full" }) %>
              <p><span>Candidate Name:</span> <strong><%= name_answer ? name_answer.content : "Not Entered" %></strong></p>
            </div>
            <div class="detail-row">
              <% pwd_answer = profile_response.answers.joins(:question).find_by(questions: { title: "Are you a PWD candidate" }) %>
              <p><span>PWD:</span> <strong><%= pwd_answer ? pwd_answer.content : "Not Entered" %></strong></p>
            </div>
            <div class="detail-row">
              <% cat_answer = profile_response.answers.joins(:question).find_by(questions: { title: " Category" }) %>
              <p><span>Category:</span> <strong><%= cat_answer ? cat_answer.content : "Not Entered" %></strong></p>
            </div>
            <div class="detail-row">
              <p><span>Credit Points (Claimed):</span> <strong><%= @responses.credit_score.round(2) %></strong></p>
            </div>
          </div>
        </div>
      </section>
    </div>

    <div class="col-md-4">
      <section class="profile-section card">
        <div class="card-body">
          <h2 class="card-title">Profile Photo</h2>
          <div class="photo-container">
            <% if @user_photo_base64 %>
              <%= image_tag "data:image/#{@res_user.photo.content_type};base64,#{@user_photo_base64}", class: 'user-photo img-fluid' %>
            <% else %>
              <div class="photo-placeholder">
                <span>No photo available</span>
              </div>
            <% end %>
          </div>
        </div>
      </section>
    </div>
  </div>
  <div class="credit-container">
    <div class="table-responsive">
      <table class="table table-bordered table credit-table">
        <thead class="thead-dark">
          <tr>
            <th scope="col">Question</th>
            <th scope="col">Response</th>
            <th scope="col">Credit</th>
            <th scope="col">Verified Count</th>
            <th scope="col">Verified Credit</th>
          </tr>
        </thead>
        <tbody>
          <% CreditSection.all.each do |credit_section| %>
            <tr>
              <td colspan="5" class="bg-light">
                <div class="d-flex justify-content-between align-items-center">
                  <span><strong><%= credit_section.title %></strong></span>
                  <span class="section-credit badge" data-section-id="<%= credit_section.id %>">0</span>
                </div>
                <% first_question = credit_section.credit_questions.first %>
                <% first_answer = CreditAnswer.where(response_id: @responses.id, credit_section_id: credit_section.id, credit_question_id: first_question.id).last if first_question %>
                <% if first_answer&.file_upload&.present? %>
                  <div class="mt-2">
                    <%= link_to "View Upload", view_pdf_response_path(ansid: first_answer.id, id: @responses.id), class: "btn btn-sm btn-outline-primary" %>
                  </div>
                <% end %>
              </td>
            </tr>
            <% credit_section.credit_questions.each do |credit_question| %>
            <%if credit_question.isheader != true && credit_question.header == nil%>
              <% credit_answer = CreditAnswer.where(response_id: @responses.id, credit_section_id: credit_section.id, credit_question_id: credit_question.id).last %>
              <% if credit_answer %>
                <tr>
                  <td><%= credit_question.title %></td>
                  <td><%= credit_answer.answer %></td>
                  <td><%= credit_answer.credit %></td>
                  <td>
                    <input type="number" class="form-control verified-count" data-answer-id="<%= credit_answer.id %>" value="<%= credit_answer.verified_count %>">
                  </td>
                  <td>
                    <input type="number" class="form-control verified-credit" data-answer-id="<%= credit_answer.id %>" value="<%= credit_answer.verified_credit %>" readonly>
                  </td>
                </tr>
              <% end %>
              <%else %>
                  <%if credit_question.isheader == true%>
                    <tr>
                      <td><%= credit_question.title %></td>
                      <td></td>
                      <td></td>
                      <td></td>
                      <td></td>
                    </tr>
                    <%credit_question.sub_questions.each do |sub_question|%>
                      <% credit_answer = CreditAnswer.where(response_id: @responses.id, credit_section_id: credit_section.id, credit_question_id: sub_question.id).last %>
                      <tr>
                        <td><%= sub_question.title %></td>
                        <td><%= credit_answer.answer %></td>
                        <td><%= credit_answer.credit %></td>
                        <td>
                          <input type="number" class="form-control verified-count" data-answer-id="<%= credit_answer.id %>" value="<%= credit_answer.verified_count %>">
                        </td>
                        <td>
                          <input type="number" class="form-control verified-credit" data-answer-id="<%= credit_answer.id %>" value="<%= credit_answer.verified_credit %>" readonly>
                        </td>
                      </tr>
                    <%end%>
                    <%end%>
                  <%end%>
                <%end%>
            <% end %>
        </tbody>
      </table>
    </div>
  </div>

  <div class="mt-3">
    <strong>Total Validated Credit Score: </strong>
    <span id="totalValidatedCredit">0</span>
  </div>

  <button id="updateAllBtn" class="btn btn-outline-dark mt-3">Update All</button>

  <div class="row mt-5 justify-content-center">
    <div class="col-md-10">
      <div class="card">
        <div class="card-header text-white">
          <h4 class="mb-0">Eligibility Assessment Form</h4>
        </div>
        <div class="card-body">
          <%= form_with(model: @responses, url: update_eligibility_response_path(res_id: @responses.id), method: :post, class: "eligibility-form") do |f| %>
            <div class="row mb-3">
            <h6 class="card-title mb-4">Qualification Group:</h6>
            <div class="col-md-12">
              <table class="table table-bordered">
                <thead>
                  <tr>
                    <th>Undergraduate</th>
                    <th>Postgraduate</th>
                    <th>PhD</th>
                    <th>PostDoc</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td><%= f.select :undergraduate, options_for_select([['G1'], ['G2'], ['G3'], ['G4'],['Others', 'O']], @responses.undergraduate), {}, class: "form-select", required: true %></td>
                    <td><%= f.select :postgraduate, options_for_select([['G1'], ['G2'], ['G3'], ['G4'],['Others', 'O']], @responses.postgraduate), {}, class: "form-select", required: true %></td>
                    <td><%= f.select :phd, options_for_select([['G1'], ['G2'], ['G3'], ['G4'],['Others', 'O']], @responses.phd), {}, class: "form-select", required: true %></td>
                    <td><%= f.select :postdoc, options_for_select([['G1'], ['G2'], ['G3'], ['G4'],['Others', 'O'], ['None']], @responses.postdoc), {}, class: "form-select", required: true %></td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>

            <div class="row mb-3">
              <div class="col-md-6">
                <%= f.label :experience_type, "Experience Type/Institute Ranking", class: "form-label" %>
                <%= f.select :experience_type, options_for_select([['E1'], ['E2'], ['E3'], ['E4'],['E5'], ['E6'], ['Others', 'O'], ['None']], @responses.experience_type), {}, class: "form-select", required: true %>
              </div>

              <div class="col-md-6">
                <%= f.label :major_awards, "Patents / Major Awards / Fellowship", class: "form-label" %>
                <%= f.text_area :major_awards, class: "form-control", rows: 3, required: true %>
              </div>
            </div>

            <div class="row mb-3">
              <div class="col-md-6">
                <%= f.label :academic_experience, "Academic Credentials", class: "form-label" %>
                <%= f.select :academic_experience, options_for_select([['Satisfactory', true], ['Not Satisfactory', false]], @responses.academic_experience), {}, class: "form-select experience-select", id: "academic_experience_select", required: true %>
              </div>
              <div class="col-md-6 comments-field" id="academic_experience_comments" style="display: none;">
                <%= f.label :acad_exp_comments, "Comments", class: "form-label" %>
                <%= f.text_area :acad_exp_comments, class: "form-control", rows: 3 %>
              </div>
            </div>

           <div class="row mb-3">
              <div class="col-md-6">
                <%= f.label :professional_experience, "Professional Experience", class: "form-label" %>
                <%= f.select :professional_experience, options_for_select([['Satisfactory', true], ['Not Satisfactory', false]], @responses.professional_experience), {}, class: "form-select experience-select", id: "professional_experience_select", required: true  %>
              </div>
              <div class="col-md-6 comments-field" id="professional_experience_comments" style="display: none;">
                <%= f.label :prof_exp_comments, "Comments", class: "form-label" %>
                <%= f.text_area :prof_exp_comments, class: "form-control", rows: 3 %>
              </div>
            </div>

            <div class="row mb-3">
              <div class="col-md-6">
                <%= f.label :credit_requirements, "Credit Requirements", class: "form-label" %>
                <%= f.select :credit_requirements, options_for_select([['Satisfactory', true], ['Not Satisfactory', false]], @responses.credit_requirements), {}, class: "form-select experience-select", id: "credit_requirements_select" , required: true %>
              </div>
              <div class="col-md-6 comments-field" id="credit_requirements_comments" style="display: none;">
                <%= f.label :credit_req_comments, "Comments", class: "form-label" %>
                <%= f.text_area :credit_req_comments, class: "form-control", rows: 3 %>
              </div>
            </div>

            <div class="row mb-3">
              <div class="col-md-6">
                <% selected_value = case @responses.eligibility.to_s
                  when '1', 'Yes' then 'Yes'
                  when '0', 'No' then 'No'
                  else nil
                  end %>

                <%= f.label :eligibility, class: "form-label" %>
                <%= f.select :eligibility,
                    options_for_select([
                      ['Yes', 'Yes'],
                      ['No', 'No']
                    ], selected: selected_value),
                    {},
                    class: "form-select",
                    required: true
                %>
            </div>
              <div class="col-md-6">
                <%= f.label :remark, "Add Remarks", class: "form-label" %>
                <%= f.text_area :remark, class: "form-control", rows: 3 , required: true %>
              </div>
            </div>

            <div class="text-center mt-4">
              <%= f.submit "Save", class: "btn btn-outline-dark" %>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
  var creditAnswers = <%= raw CreditAnswer.where(response_id: @responses&.id).includes(:credit_question, :credit_section).to_json(
    only: [:id, :credit_question_id, :credit_section_id],
    include: {
      credit_question: { only: [:max_credit, :obt_credit] },
      credit_section: { only: [:id, :max_credit] }
    }
  ) %>;
  var verifiedCountInputs = document.querySelectorAll('.verified-count');
  var verifiedCreditInputs = document.querySelectorAll('.verified-credit');
  var updateAllBtn = document.getElementById('updateAllBtn');
  var totalValidatedCreditSpan = document.getElementById('totalValidatedCredit');
  var sectionCreditSpans = document.querySelectorAll('.section-credit');

  function updateCredit(answerId, newCount) {
    var answer = creditAnswers.find(a => a.id === answerId);
    if (!answer || !answer.credit_question) return 0;

    var obtCredit = answer.credit_question.obt_credit || 0;
    var maxCredit = answer.credit_question.max_credit;

    var calculatedCredit = newCount * obtCredit;

    if (maxCredit !== null && maxCredit !== undefined) {
      return Math.min(calculatedCredit, maxCredit);
    } else {
      return calculatedCredit;
    }
  }

  function calculateSectionTotal(sectionId) {
    var sectionAnswers = creditAnswers.filter(a => a.credit_section_id === sectionId);
    var sectionTotal = sectionAnswers.reduce((total, answer) => {
      var creditInput = document.querySelector(`.verified-credit[data-answer-id="${answer.id}"]`);
      return total + (parseFloat(creditInput.value) || 0);
    }, 0);

    var sectionMaxCredit = sectionAnswers[0]?.credit_section?.max_credit;
    if (sectionMaxCredit !== null && sectionMaxCredit !== undefined) {
      return Math.min(sectionTotal, sectionMaxCredit);
    } else {
      return sectionTotal;
    }
  }

  function updateAllCredits() {
    var totalCredit = 0;
    var sectionTotals = {};

    verifiedCountInputs.forEach(input => {
      var answerId = parseInt(input.dataset.answerId);
      var newCount = parseFloat(input.value) || 0;
      var creditInput = document.querySelector(`.verified-credit[data-answer-id="${answerId}"]`);
      if (creditInput) {
        var newCredit = updateCredit(answerId, newCount);
        creditInput.value = newCredit.toFixed(2);
      }
    });

    // Calculate section totals and overall total
    var uniqueSectionIds = [...new Set(creditAnswers.map(a => a.credit_section_id))];
    uniqueSectionIds.forEach(sectionId => {
      var sectionTotal = calculateSectionTotal(sectionId);
      sectionTotals[sectionId] = sectionTotal;
      totalCredit += sectionTotal;

      // Update section credit display
      var sectionCreditSpan = document.querySelector(`.section-credit[data-section-id="${sectionId}"]`);
      if (sectionCreditSpan) {
        sectionCreditSpan.textContent = sectionTotal.toFixed(2);
      }
    });

    totalValidatedCreditSpan.textContent = totalCredit.toFixed(2);
  }

  verifiedCountInputs.forEach(input => {
    input.addEventListener('input', function() {
      var answerId = parseInt(this.dataset.answerId);
      var newCount = parseFloat(this.value) || 0;
      var creditInput = document.querySelector(`.verified-credit[data-answer-id="${answerId}"]`);
      if (creditInput) {
        creditInput.value = updateCredit(answerId, newCount).toFixed(2);
      }
      updateAllCredits();
    });
  });

  updateAllBtn.addEventListener('click', function() {
    var updateData = Array.from(verifiedCountInputs).map(input => ({
      id: parseInt(input.dataset.answerId),
      verified_count: parseFloat(input.value) || 0,
      verified_credit: parseFloat(document.querySelector(`.verified-credit[data-answer-id="${input.dataset.answerId}"]`).value) || 0
    }));

    var totalValidatedCredit = parseFloat(totalValidatedCreditSpan.textContent);

    fetch('/update_credit_answers', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({
        credit_answers: updateData,
        response_id: <%= @responses.id %>,
        validated_credit_score: totalValidatedCredit
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        alert('All credit answers updated successfully!');
      } else {
        alert('Error updating credit answers. Please try again.');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('An error occurred. Please try again.');
    });
  });

  // Initial calculation
  updateAllCredits();

  // New code for handling experience selects
  const experienceSelects = [
    { selectId: 'academic_experience_select', commentId: 'academic_experience_comments' },
    { selectId: 'professional_experience_select', commentId: 'professional_experience_comments' },
    { selectId: 'credit_requirements_select', commentId: 'credit_requirements_comments' }
  ];

  experienceSelects.forEach(({ selectId, commentId }) => {
    const select = document.getElementById(selectId);
    const commentField = document.getElementById(commentId);

    if (select && commentField) {
      select.addEventListener('change', function() {
        commentField.style.display = this.value === 'false' ? 'block' : 'none';
      });

      // Trigger change event on page load to set initial state
      select.dispatchEvent(new Event('change'));
    }
  });

  // Log for debugging
  console.log('Experience selects:', experienceSelects);
  experienceSelects.forEach(({ selectId, commentId }) => {
    console.log(`${selectId} exists:`, !!document.getElementById(selectId));
    console.log(`${commentId} exists:`, !!document.getElementById(commentId));
  });
});

</script>