<%= render partial: 'partials/navbar', locals: { user: @user, locale: true } %>

<div class="container mt-4">
  <%= link_to "Go Back", :back, class: "btn btn-light mb-3" %>

  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead class="thead-dark">
        <tr>
          <th scope="col">Question</th>
          <th scope="col">Count</th>
          <th scope="col">Credit</th>
          <th scope="col">Uploads</th>
          <th scope="col">Verified Count</th>
          <th scope="col">Verified Credit</th>
        </tr>
      </thead>
      <tbody>
        <% CreditAnswer.all.each do |answer| %>
          <% if answer.response_id == @responses.id %>
            <tr>
              <% @question = CreditQuestion.find_by(id: answer.credit_question_id) %>
              <% @response = Response.find_by(id: answer.response_id) %>
              <td><%= @question.title %></td>
              <td><%= answer.answer %></td>
              <td><%= answer.credit %></td>
              <td>
                <% if answer.file_upload.present? %>
                  <%= link_to "View", view_pdf_response_path(ansid: answer.id, id: @response.id), class: "btn btn-sm btn-outline-primary" %>
                <% else %>
                  No Upload
                <% end %>
              </td>
              <td>
                <input type="number" class="form-control verified-count" data-answer-id="<%= answer.id %>" value="<%= answer.verified_count %>">
              </td>
              <td>
                <input type="number" class="form-control verified-credit" data-answer-id="<%= answer.id %>" value="<%= answer.verified_credit %>" readonly>
              </td>
            </tr>
          <% end %>
        <% end %>
      </tbody>
    </table>
  </div>

  <button id="updateAllBtn" class="btn btn-primary mt-3">Update All</button>

  <!-- The Remarks and Eligibility Section -->
    <!-- The Remarks and Eligibility Section -->
  <div class="row mt-4">
    <div class="col-md-6">
      <%= form_with(model: @responses, url: add_remark_response_path(res_id: @responses.id), method: :post, class: 'mb-4') do |f| %>
        <div class="form-group">
          <%= f.label :remark, "Remarks", class: "form-label", for: "remark" %>
          <%= f.text_area :remark, class: "form-control", id: "remark", rows: 3 %>
          <%= f.submit "Add", class: "btn btn-outline-primary mt-2" %>
        </div>
      <% end %>
    </div>

    <div class="col-md-6">
      <%= form_with(model: @responses, url: update_eligibility_response_path(res_id: @responses.id), method: :post) do |f| %>
        <div class="form-group">
          <%= f.label :eligibility, "Eligibility", class: "form-label" %>
          <% if @responses.eligibility == true %>
            <em class="text-success">(The Applicant is Eligible)</em>
          <% else %>
            <em class="text-danger">(The Applicant is Not Eligible)</em>
          <% end %>
          <br>
          <%= f.hidden_field :eligibility, value: !@responses.eligibility %>
          <%= f.submit "Update", class: "btn btn-outline-primary" %>
        </div>
      <% end %>
    </div>
  </div>

</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
  var creditAnswers = <%= raw CreditAnswer.where(response_id: @responses&.id).includes(:credit_question).to_json(only: [:id, :credit_question_id], include: { credit_question: { only: [:max_credit, :obt_credit] } }) %>;
  var verifiedCountInputs = document.querySelectorAll('.verified-count');
  var verifiedCreditInputs = document.querySelectorAll('.verified-credit');
  var updateAllBtn = document.getElementById('updateAllBtn');

  function updateCredit(answerId, newAnswer) {
    var answer = creditAnswers.find(a => a.id === answerId);
    if (!answer) return;

    var maxCredit = answer.credit_question ? (answer.credit_question.max_credit || 0) : 0;
    var obtCredit = answer.credit_question ? (answer.credit_question.obt_credit || 0) : 0;

    var newCredit = Math.min(newAnswer * obtCredit, maxCredit);
    return newCredit.toFixed(2);
  }

  function updateAllCredits() {
    verifiedCountInputs.forEach(input => {
      var answerId = parseInt(input.dataset.answerId);
      var newAnswer = parseFloat(input.value) || 0;
      var creditInput = document.querySelector(`.verified-credit[data-answer-id="${answerId}"]`);
      if (creditInput) {
        creditInput.value = updateCredit(answerId, newAnswer);
      }
    });
  }

  verifiedCountInputs.forEach(input => {
    input.addEventListener('input', updateAllCredits);
  });

  updateAllBtn.addEventListener('click', function() {
    var updateData = Array.from(verifiedCountInputs).map(input => ({
      id: parseInt(input.dataset.answerId),
      verified_count: parseFloat(input.value) || 0,
      verified_credit: parseFloat(document.querySelector(`.verified-credit[data-answer-id="${input.dataset.answerId}"]`).value) || 0
    }));

    fetch('/update_credit_answers', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({ credit_answers: updateData })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        alert('All credit answers updated successfully!');
      } else {
        alert('Error updating credit answers. Please try again.');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('An error occurred. Please try again.');
    });
  });

  // Initial calculation
  updateAllCredits();
});
</script>