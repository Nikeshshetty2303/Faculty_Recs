<%= stylesheet_link_tag 'appprofile' %>
<%= render partial: 'partials/navbar', locals: { user: @user, locale: true } %>

<div class="container">
  <!-- Creating a new entry -->
  <% if @user.nav_tab_no == @user.tab_no %>
    <div class="form-container">
      <%= form_with(model: @response, url: create_response_form_path(id: @user.id), method: :post, class: 'responsive-form') do |form| %>
        <div class="tab-container">
          <% Tab.all.each_with_index do |tab, index| %>
            <% if tab.id == @user.tab_no %>
              <div class="tab-title present">
                <%= link_to "#{tab.title}", home_app_profile_path(id: @user.id, res_id: @response.id, nav_tab_no: tab.id) %>
              </div>
            <% elsif tab.id < @user.tab_no %>
              <div class="tab-title light">
                <%= link_to "#{tab.title}", home_app_profile_path(id: @user.id, nav_tab_no: tab.id, res_id: @response.id)%>
              </div>
            <% else %>
              <div class="tab-title dimmed">
                <%= tab.title %>
              </div>
            <% end %>
          <% end %>
        </div>

        <h2 class="form-title"><%= @tab.title %></h2>

        <% @questions.where(tab_id: @tab.id).sort_by(&:position).each do |question| %>
          <div class="question-container" data-role="<%= question.role %>" <%= 'style="display: none;"' if question.role == 'O' %>>
            <label class="form-label"><%= question.title %></label>
            <%if question.title == "Self Attestation"%>
              <%= link_to "View Self Attestation Document", "/self attestation.pdf", target: '_blank' %>
            <%end%>

            <% case question.question_type_id %>
            <% when 1 %>
              <%= form.text_field :content, name: "response[answers_attributes][#{question.id}][content]", class: 'form-control', required: question.mandatory %>

            <% when 4 %>
              <%= form.text_area :content, name: "response[answers_attributes][#{question.id}][content]", class: 'form-control' , required: question.mandatory%>

            <% when 8 %>
              <%= form.date_field :content, name: "response[answers_attributes][#{question.id}][content]", class: 'form-control' , required: question.mandatory%>

            <% when 9 %>
              <%= form.file_field :file, name: "response[answers_attributes][#{question.id}][file]", class: 'form-control' , required: question.mandatory, accept: ".pdf"%>

            <% when 5 %>
              <%= form.number_field :content, name: "response[answers_attributes][#{question.id}][content]", class: 'form-control', required: question.mandatory %>

            <% when 2 %>
              <div class="radio-group">
                <% question.options.each do |option| %>
                  <label class="radio-label">
                    <%= form.radio_button :content, option.title, name: "response[answers_attributes][#{question.id}][content]", class: 'radio-input', data: { question_id: question.id, role: question.role }, required: question.mandatory %>
                    <%= option.title %>
                  </label>
                <% end %>
              </div>

            <% when 3 %>
              <div class="checkbox-group">
                <% question.options.each do |option| %>
                  <label class="checkbox-label">
                    <%= form.check_box :content, { multiple: true, name: "response[answers_attributes][#{question.id}][content][]" , required: question.mandatory}, option.title, nil %>
                    <%= option.title %>
                  </label>
                <% end %>
              </div>

            <% when 6 %>
              <div id="text_fields_<%= question.id %>" class="dynamic-table-container">
                <table class="option-table" id="option_table_<%= question.id %>">
                  <thead>
                    <tr>
                      <% question.options.each do |option| %>
                        <th><%= option.title %></th>
                      <% end %>
                      <th>Action</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <% question.options.each do |option| %>
                        <td>
                          <% if option.title =~ /DD-MM-YYYY/ %>
                            <%= form.date_field :content, name: "response[answers_attributes][#{question.id}][content][]", class: 'form-control', data: { role: option.role }, required: question.mandatory %>
                          <% else %>
                            <%= form.text_field :content, name: "response[answers_attributes][#{question.id}][content][]", class: 'form-control', data: { role: option.role }, readonly: (option.role == "R"), required: question.mandatory %>
                          <% end %>
                        </td>
                      <% end %>
                      <td>
                        <button type="button" class="btn btn-outline-danger btn-sm" onclick="deleteTableRow(this)">Delete</button>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <button type="button" class="btn btn-outline-primary add-row-btn" onclick="addTableRow('<%= question.id %>')">Add Row</button>

            <% when 7 %>
            <% end %>
          </div>
        <% end %>

        <div class="form-actions">
          <%= form.submit "Create", class: "btn btn-primary" %>
        </div>
      <% end %>
    </div>

  <!-- Editing the existing entry -->
  <% else %>
    <div class="form-container">
      <%= form_with(model: @response, url: update_app_profile_response_form_path(id: @user.id, res_id: @response.id), method: :post, class: 'responsive-form') do |form| %>
        <div class="tab-container">
          <% Tab.all.each_with_index do |tab, index| %>
            <% if tab.id == @user.tab_no %>
              <div class="tab-title active">
                <%= link_to "#{tab.title}", home_app_profile_path(id: @user.id, nav_tab_no: tab.id, res_id: @response.id) %>
              </div>
            <% elsif tab.id == @user.nav_tab_no %>
              <div class="tab-title present">
                <%= link_to "#{tab.title}", home_app_profile_path(id: @user.id, nav_tab_no: tab.id, res_id: @response.id) %>
              </div>
            <% elsif tab.id < @user.tab_no && tab.id != @user.nav_tab_no %>
              <div class="tab-title light">
                <%= link_to "#{tab.title}", home_app_profile_path(id: @user.id, nav_tab_no: tab.id, res_id: @response.id), method: :post %>
              </div>
            <% else %>
              <div class="tab-title dimmed">
                <%= tab.title %>
              </div>
            <% end %>
          <% end %>
        </div>

        <h2 class="form-title"><%= @tab.title %></h2>

        <% map = {} %>
        <% field_map = {} %>

        <% @questions.where(tab_id: @tab.id).sort_by(&:position).each do |question| %>
          <div class="question-container" data-role="<%= question.role %>" <%= 'style="display: none;"' if question.role == 'O' %>>
            <% @response.answers.all.each do |answer| %>
              <% if answer.question_id == question.id %>
                <% field_map[question.id] = answer if question.question_type_id == 9 %>
                <% map[question.id] = answer.content %>
              <% end %>
            <% end %>

            <label class="form-label"><%= question.title %></label>
            <%if question.title == "Self Attestation"%>
              <%= link_to "View Self Attestation Document", "/self attestation.pdf", target: '_blank' %>
            <%end%>

            <% case question.question_type_id %>
            <% when 1 %>
              <%= form.text_field :content, name: "response[answers_attributes][#{question.id}][content]", class: 'form-control', value: map[question.id] , required: question.mandatory%>

            <% when 4 %>
              <%= form.text_area :content, name: "response[answers_attributes][#{question.id}][content]", class: 'form-control', value: map[question.id] , required: question.mandatory%>

            <% when 8 %>
              <%= form.date_field :content, name: "response[answers_attributes][#{question.id}][content]", class: 'form-control', value: map[question.id], required: question.mandatory %>

            <% when 9 %>
              <%= form.file_field :file, name: "response[answers_attributes][#{question.id}][file]", class: 'form-control', accept: ".pdf"%>
              <% if question.question_type_id == 9 && field_map[question.id] != nil && field_map[question.id].file.attached? %>
                <div class="file-actions">
                  <%= link_to field_map[question.id].file.filename.to_s, view_pdf_form_path(ansid: field_map[question.id].id, id: field_map[question.id].response_id), class: "btn btn-light-blue btn-sm" %>
                </div>
              <% end %>

            <% when 5 %>
              <%= form.number_field :content, name: "response[answers_attributes][#{question.id}][content]", class: 'form-control', value: map[question.id], required: question.mandatory %>

            <% when 2 %>
              <div class="radio-group">
                <% question.options.each do |option| %>
                  <label class="radio-label">
                    <%= form.radio_button :content, option.title, name: "response[answers_attributes][#{question.id}][content]", value: option.title, class: 'radio-input', data: { question_id: question.id, role: question.role }, checked: (option.title == map[question.id]) , required: question.mandatory%>
                    <%= option.title %>
                  </label>
                <% end %>
              </div>

            <% when 3 %>
              <div class="checkbox-group">
                <% question.options.each do |option| %>
                  <label class="checkbox-label">
                    <%= form.check_box :content, { multiple: true, name: "response[answers_attributes][#{question.id}][content][]", checked: map[question.id].present? ? map[question.id].include?(option.title) : false, value: option.title, required: question.mandatory }, option.title, nil%>
                    <%= option.title %>
                  </label>
                <% end %>
              </div>

            <% when 6 %>
              <div id="text_fields_<%= question.id %>" class="dynamic-table-container">
                <table class="option-table" id="option_table_<%= question.id %>">
                  <thead>
                    <tr>
                      <% question.options.each do |option| %>
                        <th><%= option.title %></th>
                      <% end %>
                      <th>Action</th>
                    </tr>
                  </thead>
                  <tbody>
                    <% if map[question.id] != nil %>
                      <% content = eval(map[question.id]) %>
                      <% content.each_slice(question.options.size) do |chunk| %>
                        <tr>
                          <% chunk.each_with_index do |element, index| %>
                            <td>
                              <% if question.options[index].title =~ /DD-MM-YYYY/ %>
                                <%= form.date_field :content, name: "response[answers_attributes][#{question.id}][content][]", class: 'form-control', value: element.gsub(/[\[\]\"]/,""), data: { role: question.options[index].role } %>
                              <% else %>
                                <%= form.text_field :content, name: "response[answers_attributes][#{question.id}][content][]", class: 'form-control', value: element.gsub(/[\[\]\"]/,""), data: { role: question.options[index].role }, readonly: (question.options[index].role == "R") %>
                              <% end %>
                            </td>
                          <% end %>
                          <td>
                            <button type="button" class="btn btn-outline-danger btn-sm" onclick="deleteTableRow(this)">Delete</button>
                          </td>
                        </tr>
                      <% end %>
                    <% else %>
                      <tr>
                        <% question.options.each do |option| %>
                          <td>
                            <% if option.title =~ /DD-MM-YYYY/ %>
                              <%= form.date_field :content, name: "response[answers_attributes][#{question.id}][content][]", class: 'form-control', data: { role: option.role } %>
                            <% else %>
                              <%= form.text_field :content, name: "response[answers_attributes][#{question.id}][content][]", class: 'form-control', data: { role: option.role }, readonly: (option.role == "R") %>
                            <% end %>
                          </td>
                        <% end %>
                        <td>
                          <button type="button" class="btn btn-outline-danger btn-sm" onclick="deleteTableRow(this)">Delete</button>
                        </td>
                      </tr>
                    <% end %>
                  </tbody>
                </table>
              </div>
              <button type="button" class="btn btn-outline-primary add-row-btn" onclick="addTableRow('<%= question.id %>')">Add Row</button>

            <% end %>
          </div>
        <% end %>

        <div class="form-actions">
          <%= form.submit "Update", class: "btn btn-primary" %>
        </div>
      <% end %>
    </div>
  <% end %>
</div>



<%# Javascript begins %>
  <script>
    function addTableRow(questionId) {
        var table = document.getElementById('option_table_' + questionId);
        var newRow = table.insertRow(-1);
        var optionsCount = table.rows[0].cells.length - 1;

        for (var i = 0; i < optionsCount; i++) {
            var optionTitle = table.rows[0].cells[i].innerText.trim();
            var newCell = newRow.insertCell(i);
            var role = table.rows[1].cells[i].querySelector('input').getAttribute('data-role');

            if (optionTitle.includes('DD-MM-YYYY')) {
                newCell.innerHTML = '<input type="date" name="response[answers_attributes][' + questionId + '][content][]" class="form-control" data-role="' + role + '">';
            } else {
                newCell.innerHTML = '<input type="text" name="response[answers_attributes][' + questionId + '][content][]" class="form-control" data-role="' + role + '"' + (role === 'R' ? ' readonly' : '') + '>';
            }
        }

        var deleteCell = newRow.insertCell(optionsCount);
        deleteCell.innerHTML = '<button type="button" class="btn btn-outline-danger btn-sm custom-hover-danger" onclick="deleteTableRow(this)">Delete</button>';

        // Add event listeners to new S inputs
        newRow.querySelectorAll('input[data-role="S"]').forEach(function(input) {
            input.addEventListener('input', function() {
                updateRowRValue(newRow);
            });
        });

        // Initial calculation for the new row
        updateRowRValue(newRow);
    }

    function deleteTableRow(button) {
        var row = button.parentNode.parentNode;
        row.parentNode.removeChild(row);
    }

    function updateRowRValue(row) {
        let sInputs = row.querySelectorAll('input[data-role="S"]');
        let rInput = row.querySelector('input[data-role="R"]');
        let dates = [];

        sInputs.forEach(function(input) {
            let date = new Date(input.value);
            if (!isNaN(date.getTime())) {
                dates.push(date);
            }
        });

        let monthDifference = 0;
        if (dates.length >= 2) {
            let minDate = new Date(Math.min.apply(null, dates));
            let maxDate = new Date(Math.max.apply(null, dates));
            monthDifference = monthDiff(minDate, maxDate);
        }

        if (rInput) {
            rInput.value = monthDifference;
        }
    }

    function monthDiff(date1, date2) {
      let years = date2.getFullYear() - date1.getFullYear();
      let months = date2.getMonth() - date1.getMonth();

      let totalMonths = years * 12 + months;

      let resultYears = Math.floor(totalMonths / 12);
      let resultMonths = totalMonths % 12;

      let result = '';

      if (resultYears > 0) {
          result += `${resultYears} yr${resultYears !== 1 ? 's' : ''}`;
      }

      if (resultMonths > 0) {
          if (result.length > 0) result += ', ';
          result += `${resultMonths} month${resultMonths !== 1 ? 's' : ''}`;
      }

      return result || '0 months';
  }

    document.addEventListener('DOMContentLoaded', function() {
        // Set up event listeners for existing rows
        document.querySelectorAll('.option-table tbody tr').forEach(function(row) {
            row.querySelectorAll('input[data-role="S"]').forEach(function(input) {
                input.addEventListener('input', function() {
                    updateRowRValue(row);
                });
            });

            row.querySelectorAll('input[data-role="R"]').forEach(function(input) {
                input.readOnly = true;
            });

            // Initial calculation for existing rows
            updateRowRValue(row);
        });
    });

    document.addEventListener('DOMContentLoaded', function() {
        const radioInputs = document.querySelectorAll('.radio-input[data-role="C"]');

        function toggleOQuestions(isYes) {
            const oQuestions = document.querySelectorAll('.question-container[data-role="O"]');
            oQuestions.forEach(question => {
                question.style.display = isYes ? 'block' : 'none';

                if (!isYes) {
                    // Clear inputs if 'No' is selected
                    const inputs = question.querySelectorAll('input, textarea, select');
                    inputs.forEach(input => {
                        if (input.type === 'checkbox' || input.type === 'radio') {
                            input.checked = false;
                        } else {
                            input.value = '';
                        }
                    });
                }
            });
        }

        radioInputs.forEach(input => {
            input.addEventListener('change', function() {
                const isYes = this.value.toLowerCase() === 'yes';
                toggleOQuestions(isYes);
            });
        });

        // Initial check for pre-selected radio buttons
        const selectedYesInput = Array.from(radioInputs).find(input => input.checked && input.value.toLowerCase() === 'yes');
        if (selectedYesInput) {
            toggleOQuestions(true);
        } else {
            toggleOQuestions(false);
        }
    });
</script>
